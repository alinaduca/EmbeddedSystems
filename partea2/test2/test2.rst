                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.8.0 #10562 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module test2
                                      6 	.optsdcc -mmcs51 --model-small
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _main
                                     12 	.globl _CY
                                     13 	.globl _AC
                                     14 	.globl _F0
                                     15 	.globl _RS1
                                     16 	.globl _RS0
                                     17 	.globl _OV
                                     18 	.globl _F1
                                     19 	.globl _P
                                     20 	.globl _PS
                                     21 	.globl _PT1
                                     22 	.globl _PX1
                                     23 	.globl _PT0
                                     24 	.globl _PX0
                                     25 	.globl _RD
                                     26 	.globl _WR
                                     27 	.globl _T1
                                     28 	.globl _T0
                                     29 	.globl _INT1
                                     30 	.globl _INT0
                                     31 	.globl _TXD
                                     32 	.globl _RXD
                                     33 	.globl _P3_7
                                     34 	.globl _P3_6
                                     35 	.globl _P3_5
                                     36 	.globl _P3_4
                                     37 	.globl _P3_3
                                     38 	.globl _P3_2
                                     39 	.globl _P3_1
                                     40 	.globl _P3_0
                                     41 	.globl _EA
                                     42 	.globl _ES
                                     43 	.globl _ET1
                                     44 	.globl _EX1
                                     45 	.globl _ET0
                                     46 	.globl _EX0
                                     47 	.globl _P2_7
                                     48 	.globl _P2_6
                                     49 	.globl _P2_5
                                     50 	.globl _P2_4
                                     51 	.globl _P2_3
                                     52 	.globl _P2_2
                                     53 	.globl _P2_1
                                     54 	.globl _P2_0
                                     55 	.globl _SM0
                                     56 	.globl _SM1
                                     57 	.globl _SM2
                                     58 	.globl _REN
                                     59 	.globl _TB8
                                     60 	.globl _RB8
                                     61 	.globl _TI
                                     62 	.globl _RI
                                     63 	.globl _P1_7
                                     64 	.globl _P1_6
                                     65 	.globl _P1_5
                                     66 	.globl _P1_4
                                     67 	.globl _P1_3
                                     68 	.globl _P1_2
                                     69 	.globl _P1_1
                                     70 	.globl _P1_0
                                     71 	.globl _TF1
                                     72 	.globl _TR1
                                     73 	.globl _TF0
                                     74 	.globl _TR0
                                     75 	.globl _IE1
                                     76 	.globl _IT1
                                     77 	.globl _IE0
                                     78 	.globl _IT0
                                     79 	.globl _P0_7
                                     80 	.globl _P0_6
                                     81 	.globl _P0_5
                                     82 	.globl _P0_4
                                     83 	.globl _P0_3
                                     84 	.globl _P0_2
                                     85 	.globl _P0_1
                                     86 	.globl _P0_0
                                     87 	.globl _B
                                     88 	.globl _ACC
                                     89 	.globl _PSW
                                     90 	.globl _IP
                                     91 	.globl _P3
                                     92 	.globl _IE
                                     93 	.globl _P2
                                     94 	.globl _SBUF
                                     95 	.globl _SCON
                                     96 	.globl _P1
                                     97 	.globl _TH1
                                     98 	.globl _TH0
                                     99 	.globl _TL1
                                    100 	.globl _TL0
                                    101 	.globl _TMOD
                                    102 	.globl _TCON
                                    103 	.globl _PCON
                                    104 	.globl _DPH
                                    105 	.globl _DPL
                                    106 	.globl _SP
                                    107 	.globl _P0
                                    108 	.globl _nrCif
                                    109 	.globl _n_afis
                                    110 	.globl _disp
                                    111 	.globl _display
                                    112 	.globl _delta
                                    113 	.globl _rez
                                    114 	.globl _j
                                    115 	.globl _i
                                    116 	.globl _aux
                                    117 	.globl _c
                                    118 	.globl _b
                                    119 	.globl _a
                                    120 	.globl _n
                                    121 	.globl _cif
                                    122 	.globl _cifre
                                    123 	.globl _tastaAnterioara
                                    124 	.globl _v
                                    125 	.globl _x
                                    126 ;--------------------------------------------------------
                                    127 ; special function registers
                                    128 ;--------------------------------------------------------
                                    129 	.area RSEG    (ABS,DATA)
      000000                        130 	.org 0x0000
                           000080   131 _P0	=	0x0080
                           000081   132 _SP	=	0x0081
                           000082   133 _DPL	=	0x0082
                           000083   134 _DPH	=	0x0083
                           000087   135 _PCON	=	0x0087
                           000088   136 _TCON	=	0x0088
                           000089   137 _TMOD	=	0x0089
                           00008A   138 _TL0	=	0x008a
                           00008B   139 _TL1	=	0x008b
                           00008C   140 _TH0	=	0x008c
                           00008D   141 _TH1	=	0x008d
                           000090   142 _P1	=	0x0090
                           000098   143 _SCON	=	0x0098
                           000099   144 _SBUF	=	0x0099
                           0000A0   145 _P2	=	0x00a0
                           0000A8   146 _IE	=	0x00a8
                           0000B0   147 _P3	=	0x00b0
                           0000B8   148 _IP	=	0x00b8
                           0000D0   149 _PSW	=	0x00d0
                           0000E0   150 _ACC	=	0x00e0
                           0000F0   151 _B	=	0x00f0
                                    152 ;--------------------------------------------------------
                                    153 ; special function bits
                                    154 ;--------------------------------------------------------
                                    155 	.area RSEG    (ABS,DATA)
      000000                        156 	.org 0x0000
                           000080   157 _P0_0	=	0x0080
                           000081   158 _P0_1	=	0x0081
                           000082   159 _P0_2	=	0x0082
                           000083   160 _P0_3	=	0x0083
                           000084   161 _P0_4	=	0x0084
                           000085   162 _P0_5	=	0x0085
                           000086   163 _P0_6	=	0x0086
                           000087   164 _P0_7	=	0x0087
                           000088   165 _IT0	=	0x0088
                           000089   166 _IE0	=	0x0089
                           00008A   167 _IT1	=	0x008a
                           00008B   168 _IE1	=	0x008b
                           00008C   169 _TR0	=	0x008c
                           00008D   170 _TF0	=	0x008d
                           00008E   171 _TR1	=	0x008e
                           00008F   172 _TF1	=	0x008f
                           000090   173 _P1_0	=	0x0090
                           000091   174 _P1_1	=	0x0091
                           000092   175 _P1_2	=	0x0092
                           000093   176 _P1_3	=	0x0093
                           000094   177 _P1_4	=	0x0094
                           000095   178 _P1_5	=	0x0095
                           000096   179 _P1_6	=	0x0096
                           000097   180 _P1_7	=	0x0097
                           000098   181 _RI	=	0x0098
                           000099   182 _TI	=	0x0099
                           00009A   183 _RB8	=	0x009a
                           00009B   184 _TB8	=	0x009b
                           00009C   185 _REN	=	0x009c
                           00009D   186 _SM2	=	0x009d
                           00009E   187 _SM1	=	0x009e
                           00009F   188 _SM0	=	0x009f
                           0000A0   189 _P2_0	=	0x00a0
                           0000A1   190 _P2_1	=	0x00a1
                           0000A2   191 _P2_2	=	0x00a2
                           0000A3   192 _P2_3	=	0x00a3
                           0000A4   193 _P2_4	=	0x00a4
                           0000A5   194 _P2_5	=	0x00a5
                           0000A6   195 _P2_6	=	0x00a6
                           0000A7   196 _P2_7	=	0x00a7
                           0000A8   197 _EX0	=	0x00a8
                           0000A9   198 _ET0	=	0x00a9
                           0000AA   199 _EX1	=	0x00aa
                           0000AB   200 _ET1	=	0x00ab
                           0000AC   201 _ES	=	0x00ac
                           0000AF   202 _EA	=	0x00af
                           0000B0   203 _P3_0	=	0x00b0
                           0000B1   204 _P3_1	=	0x00b1
                           0000B2   205 _P3_2	=	0x00b2
                           0000B3   206 _P3_3	=	0x00b3
                           0000B4   207 _P3_4	=	0x00b4
                           0000B5   208 _P3_5	=	0x00b5
                           0000B6   209 _P3_6	=	0x00b6
                           0000B7   210 _P3_7	=	0x00b7
                           0000B0   211 _RXD	=	0x00b0
                           0000B1   212 _TXD	=	0x00b1
                           0000B2   213 _INT0	=	0x00b2
                           0000B3   214 _INT1	=	0x00b3
                           0000B4   215 _T0	=	0x00b4
                           0000B5   216 _T1	=	0x00b5
                           0000B6   217 _WR	=	0x00b6
                           0000B7   218 _RD	=	0x00b7
                           0000B8   219 _PX0	=	0x00b8
                           0000B9   220 _PT0	=	0x00b9
                           0000BA   221 _PX1	=	0x00ba
                           0000BB   222 _PT1	=	0x00bb
                           0000BC   223 _PS	=	0x00bc
                           0000D0   224 _P	=	0x00d0
                           0000D1   225 _F1	=	0x00d1
                           0000D2   226 _OV	=	0x00d2
                           0000D3   227 _RS0	=	0x00d3
                           0000D4   228 _RS1	=	0x00d4
                           0000D5   229 _F0	=	0x00d5
                           0000D6   230 _AC	=	0x00d6
                           0000D7   231 _CY	=	0x00d7
                                    232 ;--------------------------------------------------------
                                    233 ; overlayable register banks
                                    234 ;--------------------------------------------------------
                                    235 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        236 	.ds 8
                                    237 ;--------------------------------------------------------
                                    238 ; internal ram data
                                    239 ;--------------------------------------------------------
                                    240 	.area DSEG    (DATA)
      000008                        241 _x::
      000008                        242 	.ds 1
      000009                        243 _v::
      000009                        244 	.ds 15
      000018                        245 _tastaAnterioara::
      000018                        246 	.ds 1
      000019                        247 _cifre::
      000019                        248 	.ds 12
      000025                        249 _cif::
      000025                        250 	.ds 1
      000026                        251 _n::
      000026                        252 	.ds 1
      000027                        253 _a::
      000027                        254 	.ds 1
      000028                        255 _b::
      000028                        256 	.ds 1
      000029                        257 _c::
      000029                        258 	.ds 1
      00002A                        259 _aux::
      00002A                        260 	.ds 1
      00002B                        261 _i::
      00002B                        262 	.ds 1
      00002C                        263 _j::
      00002C                        264 	.ds 1
      00002D                        265 _rez::
      00002D                        266 	.ds 1
      00002E                        267 _delta::
      00002E                        268 	.ds 1
      00002F                        269 _display::
      00002F                        270 	.ds 3
      000032                        271 _disp::
      000032                        272 	.ds 1
      000033                        273 _n_afis::
      000033                        274 	.ds 1
      000034                        275 _nrCif::
      000034                        276 	.ds 1
                                    277 ;--------------------------------------------------------
                                    278 ; overlayable items in internal ram 
                                    279 ;--------------------------------------------------------
                                    280 ;--------------------------------------------------------
                                    281 ; Stack segment in internal ram 
                                    282 ;--------------------------------------------------------
                                    283 	.area	SSEG
      000037                        284 __start__stack:
      000037                        285 	.ds	1
                                    286 
                                    287 ;--------------------------------------------------------
                                    288 ; indirectly addressable internal ram data
                                    289 ;--------------------------------------------------------
                                    290 	.area ISEG    (DATA)
                                    291 ;--------------------------------------------------------
                                    292 ; absolute internal ram data
                                    293 ;--------------------------------------------------------
                                    294 	.area IABS    (ABS,DATA)
                                    295 	.area IABS    (ABS,DATA)
                                    296 ;--------------------------------------------------------
                                    297 ; bit data
                                    298 ;--------------------------------------------------------
                                    299 	.area BSEG    (BIT)
                                    300 ;--------------------------------------------------------
                                    301 ; paged external ram data
                                    302 ;--------------------------------------------------------
                                    303 	.area PSEG    (PAG,XDATA)
                                    304 ;--------------------------------------------------------
                                    305 ; external ram data
                                    306 ;--------------------------------------------------------
                                    307 	.area XSEG    (XDATA)
                                    308 ;--------------------------------------------------------
                                    309 ; absolute external ram data
                                    310 ;--------------------------------------------------------
                                    311 	.area XABS    (ABS,XDATA)
                                    312 ;--------------------------------------------------------
                                    313 ; external initialized ram data
                                    314 ;--------------------------------------------------------
                                    315 	.area XISEG   (XDATA)
                                    316 	.area HOME    (CODE)
                                    317 	.area GSINIT0 (CODE)
                                    318 	.area GSINIT1 (CODE)
                                    319 	.area GSINIT2 (CODE)
                                    320 	.area GSINIT3 (CODE)
                                    321 	.area GSINIT4 (CODE)
                                    322 	.area GSINIT5 (CODE)
                                    323 	.area GSINIT  (CODE)
                                    324 	.area GSFINAL (CODE)
                                    325 	.area CSEG    (CODE)
                                    326 ;--------------------------------------------------------
                                    327 ; interrupt vector 
                                    328 ;--------------------------------------------------------
                                    329 	.area HOME    (CODE)
      000000                        330 __interrupt_vect:
      000000 02 00 06         [24]  331 	ljmp	__sdcc_gsinit_startup
                                    332 ;--------------------------------------------------------
                                    333 ; global & static initialisations
                                    334 ;--------------------------------------------------------
                                    335 	.area HOME    (CODE)
                                    336 	.area GSINIT  (CODE)
                                    337 	.area GSFINAL (CODE)
                                    338 	.area GSINIT  (CODE)
                                    339 	.globl __sdcc_gsinit_startup
                                    340 	.globl __sdcc_program_startup
                                    341 	.globl __start__stack
                                    342 	.globl __mcs51_genXINIT
                                    343 	.globl __mcs51_genXRAMCLEAR
                                    344 	.globl __mcs51_genRAMCLEAR
                                    345 	.area GSFINAL (CODE)
      00005F 02 00 03         [24]  346 	ljmp	__sdcc_program_startup
                                    347 ;--------------------------------------------------------
                                    348 ; Home
                                    349 ;--------------------------------------------------------
                                    350 	.area HOME    (CODE)
                                    351 	.area HOME    (CODE)
      000003                        352 __sdcc_program_startup:
      000003 02 00 62         [24]  353 	ljmp	_main
                                    354 ;	return from main will return to caller
                                    355 ;--------------------------------------------------------
                                    356 ; code
                                    357 ;--------------------------------------------------------
                                    358 	.area CSEG    (CODE)
                                    359 ;------------------------------------------------------------
                                    360 ;Allocation info for local variables in function 'main'
                                    361 ;------------------------------------------------------------
                                    362 ;	test2.c:6: int main() {
                                    363 ;	-----------------------------------------
                                    364 ;	 function main
                                    365 ;	-----------------------------------------
      000062                        366 _main:
                           000007   367 	ar7 = 0x07
                           000006   368 	ar6 = 0x06
                           000005   369 	ar5 = 0x05
                           000004   370 	ar4 = 0x04
                           000003   371 	ar3 = 0x03
                           000002   372 	ar2 = 0x02
                           000001   373 	ar1 = 0x01
                           000000   374 	ar0 = 0x00
                                    375 ;	test2.c:7: v[0] = 0xC0;
      000062 75 09 C0         [24]  376 	mov	_v,#0xc0
                                    377 ;	test2.c:8: v[1] = 0xF9;
      000065 75 0A F9         [24]  378 	mov	(_v + 0x0001),#0xf9
                                    379 ;	test2.c:9: v[2] = 0xA4;
      000068 75 0B A4         [24]  380 	mov	(_v + 0x0002),#0xa4
                                    381 ;	test2.c:10: v[3] = 0xB0;
      00006B 75 0C B0         [24]  382 	mov	(_v + 0x0003),#0xb0
                                    383 ;	test2.c:11: v[4] = 0x99;
      00006E 75 0D 99         [24]  384 	mov	(_v + 0x0004),#0x99
                                    385 ;	test2.c:12: v[5] = 0x92;
      000071 75 0E 92         [24]  386 	mov	(_v + 0x0005),#0x92
                                    387 ;	test2.c:13: v[6] = 0x82;
      000074 75 0F 82         [24]  388 	mov	(_v + 0x0006),#0x82
                                    389 ;	test2.c:14: v[7] = 0xF8;
      000077 75 10 F8         [24]  390 	mov	(_v + 0x0007),#0xf8
                                    391 ;	test2.c:15: v[8] = 0x80;
      00007A 75 11 80         [24]  392 	mov	(_v + 0x0008),#0x80
                                    393 ;	test2.c:16: v[9] = 0x90;
      00007D 75 12 90         [24]  394 	mov	(_v + 0x0009),#0x90
                                    395 ;	test2.c:17: v[10] = 0xBF; //pentru * pun -
      000080 75 13 BF         [24]  396 	mov	(_v + 0x000a),#0xbf
                                    397 ;	test2.c:18: v[11] = 0x89; //pentru # pun H
      000083 75 14 89         [24]  398 	mov	(_v + 0x000b),#0x89
                                    399 ;	test2.c:19: v[12] = 0xFF; //pentru nimic
      000086 75 15 FF         [24]  400 	mov	(_v + 0x000c),#0xff
                                    401 ;	test2.c:20: disp = 0;
      000089 75 32 00         [24]  402 	mov	_disp,#0x00
                                    403 ;	test2.c:21: a = 0;
      00008C 75 27 00         [24]  404 	mov	_a,#0x00
                                    405 ;	test2.c:22: b = 0;
      00008F 75 28 00         [24]  406 	mov	_b,#0x00
                                    407 ;	test2.c:23: c = 0;
      000092 75 29 00         [24]  408 	mov	_c,#0x00
                                    409 ;	test2.c:24: n = 0;
      000095 75 26 00         [24]  410 	mov	_n,#0x00
                                    411 ;	test2.c:25: cif = 0;
      000098 75 25 00         [24]  412 	mov	_cif,#0x00
                                    413 ;	test2.c:26: nrCif = 0;
      00009B 75 34 00         [24]  414 	mov	_nrCif,#0x00
                                    415 ;	test2.c:27: display[0] = 12;
      00009E 75 2F 0C         [24]  416 	mov	_display,#0x0c
                                    417 ;	test2.c:28: display[1] = 12;
      0000A1 75 30 0C         [24]  418 	mov	(_display + 0x0001),#0x0c
                                    419 ;	test2.c:29: display[2] = 12;
      0000A4 75 31 0C         [24]  420 	mov	(_display + 0x0002),#0x0c
                                    421 ;	test2.c:30: for(i = 0; i < 3; i++)
      0000A7 75 2B 00         [24]  422 	mov	_i,#0x00
      0000AA                        423 00183$:
                                    424 ;	test2.c:31: for(j = 0; j < 4; j++)
      0000AA 75 2C 00         [24]  425 	mov	_j,#0x00
      0000AD                        426 00181$:
                                    427 ;	test2.c:32: cifre[i][j] = 0;
      0000AD E5 2B            [12]  428 	mov	a,_i
      0000AF 25 2B            [12]  429 	add	a,_i
      0000B1 25 E0            [12]  430 	add	a,acc
      0000B3 24 19            [12]  431 	add	a,#_cifre
      0000B5 FF               [12]  432 	mov	r7,a
      0000B6 25 2C            [12]  433 	add	a,_j
      0000B8 F8               [12]  434 	mov	r0,a
      0000B9 76 00            [12]  435 	mov	@r0,#0x00
                                    436 ;	test2.c:31: for(j = 0; j < 4; j++)
      0000BB 05 2C            [12]  437 	inc	_j
      0000BD 74 FC            [12]  438 	mov	a,#0x100 - 0x04
      0000BF 25 2C            [12]  439 	add	a,_j
      0000C1 50 EA            [24]  440 	jnc	00181$
                                    441 ;	test2.c:30: for(i = 0; i < 3; i++)
      0000C3 05 2B            [12]  442 	inc	_i
      0000C5 74 FD            [12]  443 	mov	a,#0x100 - 0x03
      0000C7 25 2B            [12]  444 	add	a,_i
      0000C9 50 DF            [24]  445 	jnc	00183$
                                    446 ;	test2.c:33: while(1) {
      0000CB                        447 00179$:
                                    448 ;	test2.c:34: x = 12;
      0000CB 75 08 0C         [24]  449 	mov	_x,#0x0c
                                    450 ;	test2.c:35: P0 = 0xF7;
      0000CE 75 80 F7         [24]  451 	mov	_P0,#0xf7
                                    452 ;	test2.c:36: if(P0_6 == 0) x = 1;
      0000D1 20 86 05         [24]  453 	jb	_P0_6,00109$
      0000D4 75 08 01         [24]  454 	mov	_x,#0x01
      0000D7 80 0E            [24]  455 	sjmp	00110$
      0000D9                        456 00109$:
                                    457 ;	test2.c:37: else if(P0_5 == 0) x = 2;
      0000D9 20 85 05         [24]  458 	jb	_P0_5,00106$
      0000DC 75 08 02         [24]  459 	mov	_x,#0x02
      0000DF 80 06            [24]  460 	sjmp	00110$
      0000E1                        461 00106$:
                                    462 ;	test2.c:38: else if(P0_4 == 0) x = 3;
      0000E1 20 84 03         [24]  463 	jb	_P0_4,00110$
      0000E4 75 08 03         [24]  464 	mov	_x,#0x03
      0000E7                        465 00110$:
                                    466 ;	test2.c:40: P0=0xFB;
      0000E7 75 80 FB         [24]  467 	mov	_P0,#0xfb
                                    468 ;	test2.c:41: if(P0_6 == 0) x = 4;
      0000EA 20 86 05         [24]  469 	jb	_P0_6,00117$
      0000ED 75 08 04         [24]  470 	mov	_x,#0x04
      0000F0 80 0E            [24]  471 	sjmp	00118$
      0000F2                        472 00117$:
                                    473 ;	test2.c:42: else if(P0_5 == 0) x = 5;
      0000F2 20 85 05         [24]  474 	jb	_P0_5,00114$
      0000F5 75 08 05         [24]  475 	mov	_x,#0x05
      0000F8 80 06            [24]  476 	sjmp	00118$
      0000FA                        477 00114$:
                                    478 ;	test2.c:43: else if(P0_4 == 0) x = 6;
      0000FA 20 84 03         [24]  479 	jb	_P0_4,00118$
      0000FD 75 08 06         [24]  480 	mov	_x,#0x06
      000100                        481 00118$:
                                    482 ;	test2.c:45: P0 = 0xFD;
      000100 75 80 FD         [24]  483 	mov	_P0,#0xfd
                                    484 ;	test2.c:46: if(P0_6 == 0) x = 7;
      000103 20 86 05         [24]  485 	jb	_P0_6,00125$
      000106 75 08 07         [24]  486 	mov	_x,#0x07
      000109 80 0E            [24]  487 	sjmp	00126$
      00010B                        488 00125$:
                                    489 ;	test2.c:47: else if(P0_5 == 0) x = 8;
      00010B 20 85 05         [24]  490 	jb	_P0_5,00122$
      00010E 75 08 08         [24]  491 	mov	_x,#0x08
      000111 80 06            [24]  492 	sjmp	00126$
      000113                        493 00122$:
                                    494 ;	test2.c:48: else if(P0_4 == 0) x = 9;
      000113 20 84 03         [24]  495 	jb	_P0_4,00126$
      000116 75 08 09         [24]  496 	mov	_x,#0x09
      000119                        497 00126$:
                                    498 ;	test2.c:50: P0 = 0xFE;
      000119 75 80 FE         [24]  499 	mov	_P0,#0xfe
                                    500 ;	test2.c:51: if(P0_6 == 0) x = 10;
      00011C 20 86 05         [24]  501 	jb	_P0_6,00133$
      00011F 75 08 0A         [24]  502 	mov	_x,#0x0a
      000122 80 0E            [24]  503 	sjmp	00134$
      000124                        504 00133$:
                                    505 ;	test2.c:52: else if(P0_5 == 0) x = 0;
      000124 20 85 05         [24]  506 	jb	_P0_5,00130$
      000127 75 08 00         [24]  507 	mov	_x,#0x00
      00012A 80 06            [24]  508 	sjmp	00134$
      00012C                        509 00130$:
                                    510 ;	test2.c:53: else if(P0_4 == 0) x = 11;
      00012C 20 84 03         [24]  511 	jb	_P0_4,00134$
      00012F 75 08 0B         [24]  512 	mov	_x,#0x0b
      000132                        513 00134$:
                                    514 ;	test2.c:55: if(tastaAnterioara != x && x != 12) {
      000132 E5 08            [12]  515 	mov	a,_x
      000134 B5 18 03         [24]  516 	cjne	a,_tastaAnterioara,00353$
      000137 02 01 FD         [24]  517 	ljmp	00159$
      00013A                        518 00353$:
      00013A 74 0C            [12]  519 	mov	a,#0x0c
      00013C B5 08 04         [24]  520 	cjne	a,_x,00354$
      00013F 74 01            [12]  521 	mov	a,#0x01
      000141 80 01            [24]  522 	sjmp	00355$
      000143                        523 00354$:
      000143 E4               [12]  524 	clr	a
      000144                        525 00355$:
      000144 FF               [12]  526 	mov	r7,a
      000145 60 03            [24]  527 	jz	00356$
      000147 02 01 FD         [24]  528 	ljmp	00159$
      00014A                        529 00356$:
                                    530 ;	test2.c:56: if(x == 11) {
      00014A 74 0B            [12]  531 	mov	a,#0x0b
      00014C B5 08 55         [24]  532 	cjne	a,_x,00156$
                                    533 ;	test2.c:57: if(cif > 0) {
      00014F E5 25            [12]  534 	mov	a,_cif
      000151 70 03            [24]  535 	jnz	00359$
      000153 02 01 FD         [24]  536 	ljmp	00159$
      000156                        537 00359$:
                                    538 ;	test2.c:58: aux = cifre[n][0] * 1000 + cifre[n][1] * 100 + cifre[n][2] * 10 + cifre[n][3];
      000156 E5 26            [12]  539 	mov	a,_n
      000158 25 26            [12]  540 	add	a,_n
      00015A 25 E0            [12]  541 	add	a,acc
      00015C 24 19            [12]  542 	add	a,#_cifre
      00015E F9               [12]  543 	mov	r1,a
      00015F E7               [12]  544 	mov	a,@r1
      000160 75 F0 E8         [24]  545 	mov	b,#0xe8
      000163 A4               [48]  546 	mul	ab
      000164 FE               [12]  547 	mov	r6,a
      000165 E9               [12]  548 	mov	a,r1
      000166 04               [12]  549 	inc	a
      000167 F8               [12]  550 	mov	r0,a
      000168 E6               [12]  551 	mov	a,@r0
      000169 75 F0 64         [24]  552 	mov	b,#0x64
      00016C A4               [48]  553 	mul	ab
      00016D 2E               [12]  554 	add	a,r6
      00016E FE               [12]  555 	mov	r6,a
      00016F 74 02            [12]  556 	mov	a,#0x02
      000171 29               [12]  557 	add	a,r1
      000172 F8               [12]  558 	mov	r0,a
      000173 E6               [12]  559 	mov	a,@r0
      000174 75 F0 0A         [24]  560 	mov	b,#0x0a
      000177 A4               [48]  561 	mul	ab
      000178 2E               [12]  562 	add	a,r6
      000179 FE               [12]  563 	mov	r6,a
      00017A 09               [12]  564 	inc	r1
      00017B 09               [12]  565 	inc	r1
      00017C 09               [12]  566 	inc	r1
      00017D E7               [12]  567 	mov	a,@r1
      00017E FD               [12]  568 	mov	r5,a
      00017F 2E               [12]  569 	add	a,r6
      000180 F5 2A            [12]  570 	mov	_aux,a
                                    571 ;	test2.c:59: if(n == 0) {
      000182 E5 26            [12]  572 	mov	a,_n
      000184 70 05            [24]  573 	jnz	00141$
                                    574 ;	test2.c:60: a = aux;
      000186 85 2A 27         [24]  575 	mov	_a,_aux
      000189 80 12            [24]  576 	sjmp	00142$
      00018B                        577 00141$:
                                    578 ;	test2.c:62: else if(n == 1) {
      00018B 74 01            [12]  579 	mov	a,#0x01
      00018D B5 26 05         [24]  580 	cjne	a,_n,00138$
                                    581 ;	test2.c:63: b = aux;
      000190 85 2A 28         [24]  582 	mov	_b,_aux
      000193 80 08            [24]  583 	sjmp	00142$
      000195                        584 00138$:
                                    585 ;	test2.c:65: else if(n == 2) {
      000195 74 02            [12]  586 	mov	a,#0x02
      000197 B5 26 03         [24]  587 	cjne	a,_n,00142$
                                    588 ;	test2.c:66: c = aux;
      00019A 85 2A 29         [24]  589 	mov	_c,_aux
      00019D                        590 00142$:
                                    591 ;	test2.c:68: cif = 0;
      00019D 75 25 00         [24]  592 	mov	_cif,#0x00
                                    593 ;	test2.c:69: n++;
      0001A0 05 26            [12]  594 	inc	_n
      0001A2 80 59            [24]  595 	sjmp	00159$
      0001A4                        596 00156$:
                                    597 ;	test2.c:72: else if(x == 10) {
      0001A4 74 0A            [12]  598 	mov	a,#0x0a
      0001A6 B5 08 35         [24]  599 	cjne	a,_x,00153$
                                    600 ;	test2.c:73: n = 0;
      0001A9 75 26 00         [24]  601 	mov	_n,#0x00
                                    602 ;	test2.c:74: cif = 0;
      0001AC 75 25 00         [24]  603 	mov	_cif,#0x00
                                    604 ;	test2.c:75: a = 0;
      0001AF 75 27 00         [24]  605 	mov	_a,#0x00
                                    606 ;	test2.c:76: b = 0;
      0001B2 75 28 00         [24]  607 	mov	_b,#0x00
                                    608 ;	test2.c:77: c = 0;
      0001B5 75 29 00         [24]  609 	mov	_c,#0x00
                                    610 ;	test2.c:78: for(i = 0; i < 3; i++)
      0001B8 75 2B 00         [24]  611 	mov	_i,#0x00
      0001BB                        612 00187$:
                                    613 ;	test2.c:79: for(j = 0; j < 4; j++)
      0001BB 75 2C 00         [24]  614 	mov	_j,#0x00
      0001BE                        615 00185$:
                                    616 ;	test2.c:80: cifre[i][j] = 0;
      0001BE E5 2B            [12]  617 	mov	a,_i
      0001C0 25 2B            [12]  618 	add	a,_i
      0001C2 25 E0            [12]  619 	add	a,acc
      0001C4 24 19            [12]  620 	add	a,#_cifre
      0001C6 FE               [12]  621 	mov	r6,a
      0001C7 25 2C            [12]  622 	add	a,_j
      0001C9 F8               [12]  623 	mov	r0,a
      0001CA 76 00            [12]  624 	mov	@r0,#0x00
                                    625 ;	test2.c:79: for(j = 0; j < 4; j++)
      0001CC 05 2C            [12]  626 	inc	_j
      0001CE 74 FC            [12]  627 	mov	a,#0x100 - 0x04
      0001D0 25 2C            [12]  628 	add	a,_j
      0001D2 50 EA            [24]  629 	jnc	00185$
                                    630 ;	test2.c:78: for(i = 0; i < 3; i++)
      0001D4 05 2B            [12]  631 	inc	_i
      0001D6 74 FD            [12]  632 	mov	a,#0x100 - 0x03
      0001D8 25 2B            [12]  633 	add	a,_i
      0001DA 50 DF            [24]  634 	jnc	00187$
      0001DC 80 1F            [24]  635 	sjmp	00159$
      0001DE                        636 00153$:
                                    637 ;	test2.c:82: else if(x != 12) {
      0001DE EF               [12]  638 	mov	a,r7
      0001DF 70 1C            [24]  639 	jnz	00159$
                                    640 ;	test2.c:83: if(n < 3 && cif < 4) {
      0001E1 74 FD            [12]  641 	mov	a,#0x100 - 0x03
      0001E3 25 26            [12]  642 	add	a,_n
      0001E5 40 16            [24]  643 	jc	00159$
      0001E7 74 FC            [12]  644 	mov	a,#0x100 - 0x04
      0001E9 25 25            [12]  645 	add	a,_cif
      0001EB 40 10            [24]  646 	jc	00159$
                                    647 ;	test2.c:84: cifre[n][cif] = x;
      0001ED E5 26            [12]  648 	mov	a,_n
      0001EF 25 26            [12]  649 	add	a,_n
      0001F1 25 E0            [12]  650 	add	a,acc
      0001F3 24 19            [12]  651 	add	a,#_cifre
      0001F5 FF               [12]  652 	mov	r7,a
      0001F6 25 25            [12]  653 	add	a,_cif
      0001F8 F8               [12]  654 	mov	r0,a
      0001F9 A6 08            [24]  655 	mov	@r0,_x
                                    656 ;	test2.c:85: cif++;
      0001FB 05 25            [12]  657 	inc	_cif
      0001FD                        658 00159$:
                                    659 ;	test2.c:90: if(n == 3) {
      0001FD 74 03            [12]  660 	mov	a,#0x03
      0001FF B5 26 02         [24]  661 	cjne	a,_n,00372$
      000202 80 03            [24]  662 	sjmp	00373$
      000204                        663 00372$:
      000204 02 03 15         [24]  664 	ljmp	00171$
      000207                        665 00373$:
                                    666 ;	test2.c:95: delta = b * b - 4 * a * c;
      000207 E5 28            [12]  667 	mov	a,_b
      000209 F5 F0            [12]  668 	mov	b,a
      00020B A4               [48]  669 	mul	ab
      00020C FF               [12]  670 	mov	r7,a
      00020D E5 27            [12]  671 	mov	a,_a
      00020F 25 E0            [12]  672 	add	a,acc
      000211 25 E0            [12]  673 	add	a,acc
      000213 FE               [12]  674 	mov	r6,a
      000214 AD 29            [24]  675 	mov	r5,_c
      000216 8D F0            [24]  676 	mov	b,r5
      000218 EE               [12]  677 	mov	a,r6
      000219 A4               [48]  678 	mul	ab
      00021A FE               [12]  679 	mov	r6,a
      00021B EF               [12]  680 	mov	a,r7
      00021C C3               [12]  681 	clr	c
      00021D 9E               [12]  682 	subb	a,r6
      00021E F5 2E            [12]  683 	mov	_delta,a
                                    684 ;	test2.c:96: if(P2_0 == 0) rez = (-b + delta/2) / (2 * a);
      000220 20 A0 46         [24]  685 	jb	_P2_0,00162$
      000223 AE 28            [24]  686 	mov	r6,_b
      000225 7F 00            [12]  687 	mov	r7,#0x00
      000227 C3               [12]  688 	clr	c
      000228 E4               [12]  689 	clr	a
      000229 9E               [12]  690 	subb	a,r6
      00022A FE               [12]  691 	mov	r6,a
      00022B E4               [12]  692 	clr	a
      00022C 9F               [12]  693 	subb	a,r7
      00022D FF               [12]  694 	mov	r7,a
      00022E AC 2E            [24]  695 	mov	r4,_delta
      000230 7D 00            [12]  696 	mov	r5,#0x00
      000232 75 35 02         [24]  697 	mov	__divsint_PARM_2,#0x02
                                    698 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      000235 8D 36            [24]  699 	mov	(__divsint_PARM_2 + 1),r5
      000237 8C 82            [24]  700 	mov	dpl,r4
      000239 8D 83            [24]  701 	mov	dph,r5
      00023B C0 07            [24]  702 	push	ar7
      00023D C0 06            [24]  703 	push	ar6
      00023F 12 03 F2         [24]  704 	lcall	__divsint
      000242 AC 82            [24]  705 	mov	r4,dpl
      000244 AD 83            [24]  706 	mov	r5,dph
      000246 D0 06            [24]  707 	pop	ar6
      000248 D0 07            [24]  708 	pop	ar7
      00024A EC               [12]  709 	mov	a,r4
      00024B 2E               [12]  710 	add	a,r6
      00024C F5 82            [12]  711 	mov	dpl,a
      00024E ED               [12]  712 	mov	a,r5
      00024F 3F               [12]  713 	addc	a,r7
      000250 F5 83            [12]  714 	mov	dph,a
      000252 AE 27            [24]  715 	mov	r6,_a
      000254 7F 00            [12]  716 	mov	r7,#0x00
      000256 EE               [12]  717 	mov	a,r6
      000257 2E               [12]  718 	add	a,r6
      000258 F5 35            [12]  719 	mov	__divsint_PARM_2,a
      00025A EF               [12]  720 	mov	a,r7
      00025B 33               [12]  721 	rlc	a
      00025C F5 36            [12]  722 	mov	(__divsint_PARM_2 + 1),a
      00025E 12 03 F2         [24]  723 	lcall	__divsint
      000261 AE 82            [24]  724 	mov	r6,dpl
      000263 AF 83            [24]  725 	mov	r7,dph
      000265 8E 2D            [24]  726 	mov	_rez,r6
      000267 80 45            [24]  727 	sjmp	00163$
      000269                        728 00162$:
                                    729 ;	test2.c:97: else rez = (-b - delta/2) / (2 * a);
      000269 AE 28            [24]  730 	mov	r6,_b
      00026B 7F 00            [12]  731 	mov	r7,#0x00
      00026D C3               [12]  732 	clr	c
      00026E E4               [12]  733 	clr	a
      00026F 9E               [12]  734 	subb	a,r6
      000270 FE               [12]  735 	mov	r6,a
      000271 E4               [12]  736 	clr	a
      000272 9F               [12]  737 	subb	a,r7
      000273 FF               [12]  738 	mov	r7,a
      000274 AC 2E            [24]  739 	mov	r4,_delta
      000276 7D 00            [12]  740 	mov	r5,#0x00
      000278 75 35 02         [24]  741 	mov	__divsint_PARM_2,#0x02
                                    742 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      00027B 8D 36            [24]  743 	mov	(__divsint_PARM_2 + 1),r5
      00027D 8C 82            [24]  744 	mov	dpl,r4
      00027F 8D 83            [24]  745 	mov	dph,r5
      000281 C0 07            [24]  746 	push	ar7
      000283 C0 06            [24]  747 	push	ar6
      000285 12 03 F2         [24]  748 	lcall	__divsint
      000288 AC 82            [24]  749 	mov	r4,dpl
      00028A AD 83            [24]  750 	mov	r5,dph
      00028C D0 06            [24]  751 	pop	ar6
      00028E D0 07            [24]  752 	pop	ar7
      000290 EE               [12]  753 	mov	a,r6
      000291 C3               [12]  754 	clr	c
      000292 9C               [12]  755 	subb	a,r4
      000293 F5 82            [12]  756 	mov	dpl,a
      000295 EF               [12]  757 	mov	a,r7
      000296 9D               [12]  758 	subb	a,r5
      000297 F5 83            [12]  759 	mov	dph,a
      000299 AE 27            [24]  760 	mov	r6,_a
      00029B 7F 00            [12]  761 	mov	r7,#0x00
      00029D EE               [12]  762 	mov	a,r6
      00029E 2E               [12]  763 	add	a,r6
      00029F F5 35            [12]  764 	mov	__divsint_PARM_2,a
      0002A1 EF               [12]  765 	mov	a,r7
      0002A2 33               [12]  766 	rlc	a
      0002A3 F5 36            [12]  767 	mov	(__divsint_PARM_2 + 1),a
      0002A5 12 03 F2         [24]  768 	lcall	__divsint
      0002A8 AE 82            [24]  769 	mov	r6,dpl
      0002AA AF 83            [24]  770 	mov	r7,dph
      0002AC 8E 2D            [24]  771 	mov	_rez,r6
      0002AE                        772 00163$:
                                    773 ;	test2.c:99: display[0] = rez % 10;
      0002AE AE 2D            [24]  774 	mov	r6,_rez
      0002B0 7F 00            [12]  775 	mov	r7,#0x00
      0002B2 75 35 0A         [24]  776 	mov	__modsint_PARM_2,#0x0a
                                    777 ;	1-genFromRTrack replaced	mov	(__modsint_PARM_2 + 1),#0x00
      0002B5 8F 36            [24]  778 	mov	(__modsint_PARM_2 + 1),r7
      0002B7 8E 82            [24]  779 	mov	dpl,r6
      0002B9 8F 83            [24]  780 	mov	dph,r7
      0002BB 12 03 BC         [24]  781 	lcall	__modsint
      0002BE AE 82            [24]  782 	mov	r6,dpl
      0002C0 8E 2F            [24]  783 	mov	_display,r6
                                    784 ;	test2.c:100: display[1] = (rez / 10) % 10;
      0002C2 AE 2D            [24]  785 	mov	r6,_rez
      0002C4 7F 00            [12]  786 	mov	r7,#0x00
      0002C6 75 35 0A         [24]  787 	mov	__divsint_PARM_2,#0x0a
                                    788 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002C9 8F 36            [24]  789 	mov	(__divsint_PARM_2 + 1),r7
      0002CB 8E 82            [24]  790 	mov	dpl,r6
      0002CD 8F 83            [24]  791 	mov	dph,r7
      0002CF 12 03 F2         [24]  792 	lcall	__divsint
      0002D2 75 35 0A         [24]  793 	mov	__modsint_PARM_2,#0x0a
      0002D5 75 36 00         [24]  794 	mov	(__modsint_PARM_2 + 1),#0x00
      0002D8 12 03 BC         [24]  795 	lcall	__modsint
      0002DB AE 82            [24]  796 	mov	r6,dpl
      0002DD 8E 30            [24]  797 	mov	(_display + 0x0001),r6
                                    798 ;	test2.c:101: display[2] = (rez / 100) % 10; //maximul e 255
      0002DF AE 2D            [24]  799 	mov	r6,_rez
      0002E1 7F 00            [12]  800 	mov	r7,#0x00
      0002E3 75 35 64         [24]  801 	mov	__divsint_PARM_2,#0x64
                                    802 ;	1-genFromRTrack replaced	mov	(__divsint_PARM_2 + 1),#0x00
      0002E6 8F 36            [24]  803 	mov	(__divsint_PARM_2 + 1),r7
      0002E8 8E 82            [24]  804 	mov	dpl,r6
      0002EA 8F 83            [24]  805 	mov	dph,r7
      0002EC 12 03 F2         [24]  806 	lcall	__divsint
      0002EF 75 35 0A         [24]  807 	mov	__modsint_PARM_2,#0x0a
      0002F2 75 36 00         [24]  808 	mov	(__modsint_PARM_2 + 1),#0x00
      0002F5 12 03 BC         [24]  809 	lcall	__modsint
      0002F8 AE 82            [24]  810 	mov	r6,dpl
      0002FA AF 83            [24]  811 	mov	r7,dph
                                    812 ;	test2.c:102: if(display[2] == 0) {
      0002FC EE               [12]  813 	mov	a,r6
      0002FD F5 31            [12]  814 	mov	(_display + 0x0002),a
      0002FF 70 0E            [24]  815 	jnz	00168$
                                    816 ;	test2.c:103: if(display[1] == 0) {
      000301 E5 30            [12]  817 	mov	a,(_display + 0x0001)
      000303 70 05            [24]  818 	jnz	00165$
                                    819 ;	test2.c:104: nrCif = 1;
      000305 75 34 01         [24]  820 	mov	_nrCif,#0x01
      000308 80 08            [24]  821 	sjmp	00169$
      00030A                        822 00165$:
                                    823 ;	test2.c:106: else nrCif = 2;
      00030A 75 34 02         [24]  824 	mov	_nrCif,#0x02
      00030D 80 03            [24]  825 	sjmp	00169$
      00030F                        826 00168$:
                                    827 ;	test2.c:108: else nrCif = 3;
      00030F 75 34 03         [24]  828 	mov	_nrCif,#0x03
      000312                        829 00169$:
                                    830 ;	test2.c:109: n = 0;
      000312 75 26 00         [24]  831 	mov	_n,#0x00
      000315                        832 00171$:
                                    833 ;	test2.c:112: P1 = 0xFF;
      000315 75 90 FF         [24]  834 	mov	_P1,#0xff
                                    835 ;	test2.c:113: P3 = disp << 3;
      000318 E5 32            [12]  836 	mov	a,_disp
      00031A C4               [12]  837 	swap	a
      00031B 03               [12]  838 	rr	a
      00031C 54 F8            [12]  839 	anl	a,#0xf8
      00031E F5 B0            [12]  840 	mov	_P3,a
                                    841 ;	test2.c:114: P1 = v[display[n_afis]];
      000320 E5 33            [12]  842 	mov	a,_n_afis
      000322 24 2F            [12]  843 	add	a,#_display
      000324 F9               [12]  844 	mov	r1,a
      000325 E7               [12]  845 	mov	a,@r1
      000326 FF               [12]  846 	mov	r7,a
      000327 24 09            [12]  847 	add	a,#_v
      000329 F9               [12]  848 	mov	r1,a
      00032A 87 90            [24]  849 	mov	_P1,@r1
                                    850 ;	test2.c:115: if(i == 0) i = 3;
      00032C E5 2B            [12]  851 	mov	a,_i
      00032E 70 05            [24]  852 	jnz	00173$
      000330 75 2B 03         [24]  853 	mov	_i,#0x03
      000333 80 02            [24]  854 	sjmp	00174$
      000335                        855 00173$:
                                    856 ;	test2.c:116: else i--;
      000335 15 2B            [12]  857 	dec	_i
      000337                        858 00174$:
                                    859 ;	test2.c:117: if(n_afis == 0) n_afis = nrCif;
      000337 E5 33            [12]  860 	mov	a,_n_afis
      000339 70 06            [24]  861 	jnz	00176$
      00033B 85 34 33         [24]  862 	mov	_n_afis,_nrCif
      00033E 02 00 CB         [24]  863 	ljmp	00179$
      000341                        864 00176$:
                                    865 ;	test2.c:118: else n_afis--;
      000341 15 33            [12]  866 	dec	_n_afis
                                    867 ;	test2.c:120: return 0;
                                    868 ;	test2.c:121: }
      000343 02 00 CB         [24]  869 	ljmp	00179$
                                    870 	.area CSEG    (CODE)
                                    871 	.area CONST   (CODE)
                                    872 	.area XINIT   (CODE)
                                    873 	.area CABS    (ABS,CODE)
